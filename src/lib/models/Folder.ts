/* tslint:disable */
/* eslint-disable */
/**
 * nmide API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FolderOrFile } from './FolderOrFile';
import {
    FolderOrFileFromJSON,
    FolderOrFileFromJSONTyped,
    FolderOrFileToJSON,
} from './FolderOrFile';

/**
 * 
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    path: string;
    /**
     * 
     * @type {Array<FolderOrFile>}
     * @memberof Folder
     */
    content: Array<FolderOrFile>;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    symbol: string;
}

/**
 * Check if a given object implements the Folder interface.
 */
export function instanceOfFolder(value: object): value is Folder {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    return true;
}

export function FolderFromJSON(json: any): Folder {
    return FolderFromJSONTyped(json, false);
}

export function FolderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Folder {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'path': json['path'],
        'content': ((json['content'] as Array<any>).map(FolderOrFileFromJSON)),
        'symbol': json['symbol'],
    };
}

export function FolderToJSON(value?: Folder | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'path': value['path'],
        'content': ((value['content'] as Array<any>).map(FolderOrFileToJSON)),
        'symbol': value['symbol'],
    };
}

