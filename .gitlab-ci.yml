stages:
  - test
  - svn
  - build

default:
  image: neelzee/nmide-tauri:latest

variables:
  CORE_OUT_DIR: "nmide-core/src-tauri/target/release/*"

rust-test:
  image: neelzee/nmide-rust:latest
  stage: test
  script:
    - cargo --version
    - echo "TODO"

js-test:
  image: neelzee/nmide-node:latest
  stage: test
  script:
    - npm --version
    - echo "TODO"

c-test:
  image: neelzee/nmide-c:latest
  stage: test
  script:
    - gcc --version
    - cmake --version
    - make --version
    - mkdir nmide-lib/build
    - git clone https://github.com/nemequ/munit.git nmide-lib/munit
    - cd nmide-lib/build
    - pwd
    - export CC=gcc
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - make
    - ls
    - ./test_cmap
    - ./nmide_test

c-check:
  image: neelzee/nmide-c:latest
  stage: test
  dependencies:
    - c-test
  script:
    - gcc --version
    - cppcheck --version
    - touch nmide-lib/report
    - cd nmide-lib
    - pwd
    - cppcheck --enable=all --force --quiet --output-file=report -imunit -ibuild .
    - mv report report-"$(date -I)".log
  artifacts:
    when: on_success
    access: all
    paths:
      - nmide-lib/report-*.log

pts:
  stage: svn
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
  dependencies:
    - js-test
    - rust-test
    - c-check
  script:
    - echo "TODO"

pdf-build:
  image: neelzee/nmide-thesis:latest
  stage: build
  dependencies:
    - pts
  when: manual
  only:
    - main
  script:
    - pdflatex --version
    - pdflatex --output-directory=nmide-thesis nmide-thesis/main.tex
  artifacts:
    when: on_success
    access: all
    paths:
      - nmide-thesis/*.pdf

nmide-lib-build:
  stage: build
  dependencies:
    - pts
  when: manual
  script:
    - gcc --version
    - cmake --version
    - make --version
    - mkdir nmide-lib/release
    - cd nmide-lib/release
    - pwd
    - export CC=gcc
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make
    - ls
  artifacts:
    when: on_success
    access: all
    paths:
      - nmide-lib/release/libnmide.*

windows-build:
  stage: build
  dependencies:
    - "pts"
  when: manual
  only:
    - main
  script:
    - echo "Needs a windows image"
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

debian-build:
  stage: build
  dependencies:
    - "pts"
  when: manual
  only:
    - main
  script:
    - just build-release
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

mac-build:
  stage: build
  dependencies:
    - "pts"
  when: manual
  only:
    - main
  script:
    - echo "TODO"
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR
