stages:
  - unit test
  - integration test
  - rapport
  - svn
  - build

default:
  image: neelzee/nmide-tauri:latest

variables:
  CORE_OUT_DIR: "nmide-core/src-tauri/target/release/*"
  ENABLED: true

test-nmide-core:
  rules:
    - if: '$ENABLED == "true"'
  stage: unit test
  script:
    - cargo --version
    - npm --version
    - cd nmide-core
    - pwd
    - npm i
    - npm run test
    - cd src-tauri
    - pwd
    - cargo test

test-nmide-std-lib:
  rules:
    - if: '$ENABLED == "true"'
  stage: unit test
  script:
    - cargo --version
    - cd nmide-core/src-tauri/nmide-std-lib
    - pwd
    - cargo test

test-nmide-macros:
  rules:
    - if: '$ENABLED == "true"'
  stage: unit test
  script:
    - cargo --version
    - cd nmide-core/src-tauri/nmide-macros
    - pwd
    - cargo test

test-nmide-plugin-manager:
  rules:
    - if: '$ENABLED == "true"'
  stage: unit test
  script:
    - cargo --version
    - cd nmide-core/src-tauri/nmide-plugin-manager
    - pwd
    - cargo test

c-test-build:
  rules:
    - if: '$ENABLED == "true"'
  image: neelzee/nmide-c:latest
  stage: unit test
  script:
    - gcc --version
    - cmake --version
    - make --version
    - mkdir nmide-lib/debug
    - git clone https://github.com/nemequ/munit.git nmide-lib/munit
    - cd nmide-lib/debug
    - pwd
    - export CC=gcc
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - make
    - ls
  artifacts:
    paths:
      - nmide-lib/debug

c-test:
  rules:
    - if: '$ENABLED == "true"'
  dependencies:
    - c-test-build
  allow_failure: true
  image: neelzee/nmide-c:latest
  stage: unit test
  script:
    - cd nmide-lib/debug
    - ls
    - ./test_cmap
    - ./test_cmodel
    - ./test_cmsg
  needs:
  - job: c-test-build
    artifacts: true

test-nmide-plugins:
  rules:
    - if: '$ENABLED == "true"'
  stage: unit test
  script:
    - cargo --version
    - cd nmide-plugin
    - pwd
    - for dir in */; do if [ -f "$dir/Cargo.toml" ]; then echo "Running tests in $dir"; (cd "$dir" && cargo test); else echo "Skipping $dir (no Cargo.toml found)"; fi; done

test-nmide-wrapper:
  rules:
    - if: '$ENABLED == "true"'
  stage: unit test
  script:
    - cargo --version
    - cd nmide-wrapper/nmide-rust-ffi
    - pwd
    - cargo test

c-check-report:
  rules:
    - if: '$ENABLED == "true"'
  dependencies:
    - c-test-build
  image: neelzee/nmide-c:latest
  allow_failure: true
  stage: rapport
  script:
    - gcc --version
    - cppcheck --version
    - valgrind --version
    - cd nmide-lib
    - ls
    - touch report
    - cppcheck --enable=all --errorlist --force --quiet --output-file=report -imunit -ibuild -irelease -idebug . >> report
    - ls
    - mv report report-"$(date -I)".xml
    - cd debug
    - ls
    - valgrind --xml=yes --xml-file=valgrind_test_cmap.xml --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmap || true
    - valgrind --xml=yes --xml-file=valgrind_test_cmodel.xml --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmodel || true
    - valgrind --xml=yes --xml-file=valgrind_test_cmsg.xml --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmsg || true
    - ls
    - mv valgrind_test_cmap.xml ../valgrind_"$(date -I)"_test_cmap.xml
    - mv valgrind_test_cmodel.xml ../valgrind_"$(date -I)"_test_cmodel.xml
    - mv valgrind_test_cmsg.xml ../valgrind_"$(date -I)"_test_cmsg.xml
  needs:
  - job: c-test-build
    artifacts: true
  artifacts:
    access: all
    paths:
      - nmide-lib/report-*.xml
      - nmide-lib/valgrind_*_test_cmap.xml
      - nmide-lib/valgrind_*_test_cmodel.xml
      - nmide-lib/valgrind_*_test_cmsg.xml

c-check-cppcheck:
  rules:
    - if: '$ENABLED == "true"'
  image: neelzee/nmide-c:latest
  allow_failure: true
  stage: rapport
  script:
    - gcc --version
    - cppcheck --version
    - cd nmide-lib
    - pwd
    - ls
    - cppcheck --enable=all --error-exitcode=1 --force --quiet -imunit -ibuild -irelease -idebug .

c-check-valgrind-cmsg:
  rules:
    - if: '$ENABLED == "true"'
  image: neelzee/nmide-c:latest
  allow_failure: true
  stage: rapport
  dependencies:
    - c-test-build
  script:
    - gcc --version
    - valgrind --version
    - cd nmide-lib
    - ls
    - cd debug
    - ls
    - valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmsg
  needs:
  - job: c-test-build
    artifacts: true

c-check-valgrind-cmap:
  rules:
    - if: '$ENABLED == "true"'
  image: neelzee/nmide-c:latest
  allow_failure: true
  stage: rapport
  dependencies:
    - c-test-build
  script:
    - gcc --version
    - valgrind --version
    - cd nmide-lib
    - ls
    - cd debug
    - ls
    - valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmap
  needs:
  - job: c-test-build
    artifacts: true

c-check-valgrind-cmodel:
  rules:
    - if: '$ENABLED == "true"'
  image: neelzee/nmide-c:latest
  allow_failure: true
  stage: rapport
  dependencies:
    - c-test-build
  script:
    - gcc --version
    - valgrind --version
    - cd nmide-lib/debug
    - pwd
    - ls
    - valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmodel
  needs:
  - job: c-test-build
    artifacts: true

integration-tests-nmide:
  rules:
    - if: '$ENABLED == "true"'
  stage: integration test
  script:
    - cargo --version
    - cd nmide-tests
    - pwd
    - cargo test

integration-tests-nmide-rust-plugins:
  rules:
    - if: '$ENABLED == "true"'
  stage: integration test
  script:
    - cargo --version
    - cd nmide-tests/rust-test
    - pwd
    - cargo test

pts:
  stage: svn
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $ENABLED == "true"'
      when: always
  script:
    - just svn

pdf-build:
  image: neelzee/nmide-thesis:latest
  stage: build
  when: manual
  script:
    - pdflatex --version
    - pdflatex --output-directory=nmide-thesis nmide-thesis/main.tex
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $ENABLED == "true"'
      when: always
      changes:
        - nmide-thesis/main.tex
  artifacts:
    when: on_success
    access: all
    paths:
      - nmide-thesis/*.pdf

nmide-lib-build:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $ENABLED == "true"'
      when: always
  stage: build
  when: manual
  script:
    - gcc --version
    - cmake --version
    - make --version
    - mkdir nmide-lib/release
    - cd nmide-lib/release
    - pwd
    - export CC=gcc
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make
    - ls
  artifacts:
    when: on_success
    access: all
    paths:
      - nmide-lib/release/libnmide.*

windows-build:
  stage: build
  when: manual
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $ENABLED == "true"'
  script:
    - echo "Needs a windows image"
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

debian-build:
  stage: build
  when: manual
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $ENABLED == "true"'
  script:
    - npm --version
    - cd nmide-core
    - pwd
    - npm i
    - npm run tauri dev
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

mac-build:
  stage: build
  when: manual
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $ENABLED == "true"'
  script:
    - echo "TODO"
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR
