stages:
  - test
  - svn
  - build

default:
  image: neelzee/nmide-tauri:latest

variables:
  CORE_OUT_DIR: "nmide-core/src-tauri/target/release/nmide"

rust_test:
  image: neelzee/nmide-rust:latest
  stage: test
  script:
    - echo "cargo --version"
    - echo "TODO"

js_test:
  image: neelzee/nmide-node:latest
  stage: test
  script:
    - echo "npm --version"
    - echo "TODO"

coverity:
  only:
    refs:
      - main
      - coverity
  script:
    - apt-get install git autoconf automake libtool make curl
    - curl -o /tmp/cov-analysis-linux64.tgz https://scan.coverity.com/download/linux64
    - form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
    - tar xfz /tmp/cov-analysis-linux64.tgz
    - ./autogen.sh
    - ./configure
    - cov-analysis-linux64-*/bin/cov-build --dir cov-int make -j4
    - tar cfz cov-int.tar.gz cov-int
    - curl https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
    - form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
    - form file=@cov-int.tar.gz --form version="`git describe --tags`"
    - form description="`git describe --tags` / $CI_COMMIT_TITLE / $CI_COMMIT_REF_NAME:$CI_PIPELINE_ID "


pts:
  stage: svn
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
  dependencies:
    - "js_test"
    - "rust_test"
  script:
    - echo "TODO"

pdf-build:
  image: neelzee/nmide-thesis:latest
  stage: build
  dependencies:
    - pts
  script:
    - pdflatex --version
    - pdflatex --output-directory=nmide-thesis nmide-thesis/main.tex
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - nmide-thesis/main.tex
      when: manual
  artifacts:
    when: on_success
    access: all
    paths:
      - nmide-thesis/*.pdf

windows-build:
  stage: build
  dependencies:
    - "pts"
  when: manual
  only:
    - main
  script:
    - echo "Needs a windows image"
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

debian-build:
  stage: build
  dependencies:
    - "pts"
  when: manual
  only:
    - main
  script:
    - just build-release
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

mac-build:
  stage: build
  dependencies:
    - "pts"
  when: manual
  only:
    - main
  script:
    - echo "TODO"
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR
