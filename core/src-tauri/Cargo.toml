[workspace]
members = ["core-macros", "core-plugin-lib", "core-std-lib"]

[package]
name = "core"
version = "1.0.0"
description = "A simple IDE"
authors = ["Nils Michael Fitjar <nfi005@uib.no>"]
license = ""
repository = "https://git.app.uib.no/Nils.Fitjar/nmide"
edition = "2021"

[lib]
name = "core_lib"
crate-type = ["staticlib", "cdylib", "rlib"]

[build-dependencies]
tauri-build = { version = "2.0.3", features = [], optional = true }

[dependencies]
# IDE specific dependencies
tauri = { version = "2.1.1", features = [
  "protocol-asset",
  "config-toml",
], optional = true }
tauri-plugin-log = { version = "2.0.2", optional = true }
tauri-plugin-fs = { version = "2.0.3", optional = true }
tauri-plugin-shell = { version = "2.0.2", optional = true }
tauri-plugin-dialog = { version = "2.0.3", optional = true }
anyhow-tauri = { version = "1.0.0", optional = true }

# Server specific dependencies
actix-web = { version = "4.9.0", optional = true }
actix-files = { version = "0.6.6", optional = true }
actix-cors = { version = "0.7.0", optional = true }

serde = { version = "1.0.215", features = ["derive"] }
once_cell = "1.20.2"
tokio = { version = "1.41.1", features = ["full"] }
anyhow = "1.0.93"
core-std-lib = { path = "./core-std-lib" }
core-plugin-lib = { path = "./core-plugin-lib" }
log = "0.4.22"
serde_json = "1.0.133"

[features]
default = []
# this feature is used for production builds or when `devPath` points to the filesystem
# DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]
ide = [
  "dep:tauri",
  "dep:tauri-plugin-log",
  "dep:tauri-plugin-fs",
  "dep:tauri-plugin-shell",
  "dep:tauri-plugin-dialog",
  "dep:tauri-build",
]
server = ["dep:actix-web", "dep:actix-files", "dep:actix-cors"]

[package.metadata.git-cliff.changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to Nmide-Core Standard Library will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true


[package.metadata.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^[a|A]dd", group = "Added" },
  { message = "^[s|S]upport", group = "Added" },
  { message = "^[r|R]emove", group = "Removed" },
  { message = "^.*: add", group = "Added" },
  { message = "^.*: support", group = "Added" },
  { message = "^.*: remove", group = "Removed" },
  { message = "^.*: delete", group = "Removed" },
  { message = "^test", group = "Fixed" },
  { message = "^fix", group = "Fixed" },
  { message = "^.*: fix", group = "Fixed" },
  { message = "^.*", group = "Changed" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
