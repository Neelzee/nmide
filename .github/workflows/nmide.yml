name: nmide
on:
  push:
  workflow_dispatch:
concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true
jobs:
  nmide-core-test-build:
    runs-on:
      - self-hosted
      - nmide-core
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - run: cargo --version
      - run: npm --version
      - run: cd nmide-core/src-tauri
      - run: cargo build
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          retention-days: 1
          path: nmide-core/src-tauri/target
  c-test-build:
    runs-on: ubuntu-latest
    container:
      image: neelzee/nmide-c:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - run: gcc --version
      - run: cmake --version
      - run: make --version
      - run: mkdir nmide-lib/debug
      - run: git clone REDACTED nmide-lib/munit
      - run: cd nmide-lib/debug
      - run: pwd
      - run: export CC=gcc
      - run: cmake -DCMAKE_BUILD_TYPE=Debug ..
      - run: make
      - run: ls
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          retention-days: 1
          path: nmide-lib/debug
  test-nmide-core-backend:
    needs: nmide-core-test-build
    runs-on:
      - self-hosted
      - nmide-core
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
        with:
          name: nmide-core-test-build
      - run: cargo --version
      - run: cd nmide-core/src-tauri
      - run: cargo test --workspace
  test-nmide-core-frontend:
    needs: nmide-core-test-build
    runs-on:
      - self-hosted
      - nmide-core
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
        with:
          name: nmide-core-test-build
      - run: npm --version
      - run: cd nmide-core
      - run: npm i
      - run: npm run test
  c-test:
    needs: c-test-build
    runs-on: ubuntu-latest
    container:
      image: neelzee/nmide-c:latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
        with:
          name: c-test-build
      - run: cd nmide-lib/debug
      - run: ls
      - run: "./test_cmap"
      - run: "./test_cmodel"
      - run: "./test_cmsg"
  test-nmide-plugins:
    runs-on:
      - self-hosted
      - nmide-core
    container:
      image: neelzee/nmide-rust:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - run: cargo --version
      - run: cd nmide-plugin
      - run: pwd
      - run: for dir in */; do if [ -f "$dir/Cargo.toml" ]; then echo "Running tests in $dir"; (cd "$dir" && cargo test); else echo "Skipping $dir (no Cargo.toml found)"; fi; done
  test-nmide-wrapper:
    needs: c-test-build
    runs-on: ubuntu-latest
    container:
      image: neelzee/nmide-wrapper:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
        with:
          name: c-test-build
      - run: cmake --version
      - run: cargo --version
      - run: cd nmide-wrapper/nmide-rust-ffi
      - run: cargo test
  integration-tests-nmide:
    needs:
      - nmide-core-test-build
      - c-test-build
      - test-nmide-core-backend
      - test-nmide-core-frontend
      - c-test
      - test-nmide-plugins
      - test-nmide-wrapper
    runs-on:
      - self-hosted
      - nmide-core
    container:
      image: neelzee/nmide-rust:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: cargo --version
      - run: cd nmide-tests
      - run: cargo test
  integration-tests-nmide-rust-plugins:
    needs:
      - nmide-core-test-build
      - c-test-build
      - test-nmide-core-backend
      - test-nmide-core-frontend
      - c-test
      - test-nmide-plugins
      - test-nmide-wrapper
    runs-on:
      - self-hosted
      - nmide-core
    container:
      image: neelzee/nmide-rust:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: cargo --version
      - run: cd nmide-tests/rust-test
      - run: cargo test
  c-check-report:
    needs: c-test-build
    runs-on: ubuntu-latest
    container:
      image: neelzee/nmide-c:latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
        with:
          name: c-test-build
      - run: gcc --version
      - run: cppcheck --version
      - run: valgrind --version
      - run: cd nmide-lib
      - run: ls
      - run: touch report
      - run: cppcheck --enable=all --errorlist --force --quiet --output-file=report -imunit -ibuild -irelease -idebug . >> report
      - run: ls
      - run: mv report report-"$(date -I)".xml
      - run: cd debug
      - run: ls
      - run: valgrind --xml=yes --xml-file=valgrind_test_cmap.xml --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmap || true
      - run: valgrind --xml=yes --xml-file=valgrind_test_cmodel.xml --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmodel || true
      - run: valgrind --xml=yes --xml-file=valgrind_test_cmsg.xml --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./test_cmsg || true
      - run: ls
      - run: mv valgrind_test_cmap.xml ../valgrind_"$(date -I)"_test_cmap.xml
      - run: mv valgrind_test_cmodel.xml ../valgrind_"$(date -I)"_test_cmodel.xml
      - run: mv valgrind_test_cmsg.xml ../valgrind_"$(date -I)"_test_cmsg.xml
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          retention-days: 7
          path: |-
            nmide-lib/report-*.xml
            nmide-lib/valgrind_*_test_cmap.xml
            nmide-lib/valgrind_*_test_cmodel.xml
            nmide-lib/valgrind_*_test_cmsg.xml
  nmide-core-coverage-report:
    needs: nmide-core-test-build
    runs-on:
      - self-hosted
      - nmide-core
    timeout-minutes: 60
    env:
      LLVM_PROFILE_FILE: target/coverage/nmide-%p-%m.profraw
      RUSTFLAGS: "-Cinstrument-coverage"
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
        with:
          name: nmide-core-test-build
      - run: rustup component add llvm-tools-preview
      - run: cargo install grcov
      - run: cargo --version
      - run: cd nmide-core/src-tauri
      - run: cargo test --workspace
      - run: grcov . -s . --binary-path ./target/debug/ -t cobertura --branch --ignore-not-existing -o ./target/debug/coverage/
      #     # 'artifacts.coverage_report' was not transformed because there is no suitable equivalent in GitHub Actions
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          retention-days: 7
          path: nmide/nmide-core/src-tauri/target/coverage/
  pdf-build:
    needs:
      - c-check-report
      - nmide-core-coverage-report
    runs-on: ubuntu-latest
    container:
      image: neelzee/nmide-thesis:latest
    if: always()
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: pdflatex --version
      - run: pdflatex --output-directory=nmide-thesis nmide-thesis/main.tex
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          path: nmide-thesis/*.pdf
  nmide-lib-build:
    needs:
      - c-check-report
      - nmide-core-coverage-report
    runs-on: ubuntu-latest
    container:
      image: neelzee/nmide-c:latest
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: gcc --version
      - run: cmake --version
      - run: make --version
      - run: mkdir nmide-lib/release
      - run: cd nmide-lib/release
      - run: cmake -DCMAKE_BUILD_TYPE=Release ..
      - run: make
      - run: ls
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          path: nmide-lib/release/libnmide.*
  windows-build:
    needs:
      - c-check-report
      - nmide-core-coverage-report
    runs-on:
      - self-hosted
      - nmide-core
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: echo "Needs a windows image"
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          path: "$CORE_OUT_DIR"
  debian-build:
    needs:
      - c-check-report
      - nmide-core-coverage-report
    runs-on:
      - self-hosted
      - nmide-core
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: npm --version
      - run: cd nmide-core
      - run: pwd
      - run: npm i
      - run: npm run tauri dev
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          path: "$CORE_OUT_DIR"
  mac-build:
    needs:
      - c-check-report
      - nmide-core-coverage-report
    runs-on:
      - self-hosted
      - nmide-core
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: echo "TODO"
      - uses: actions/upload-artifact@v4.1.0
        if: success()
        with:
          name: "${{ github.job }}"
          path: "$CORE_OUT_DIR"
  release_job:
    needs:
      - pdf-build
      - nmide-lib-build
      - windows-build
      - debian-build
      - mac-build
    runs-on: ubuntu-latest
    if: ${{ github.ref }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true
      - uses: actions/download-artifact@v4.1.0
      - run: echo "Running release_job"
      - uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: "${{ github.ref }}"
          name: Release ${{ github.ref }}
          body: "${{ github.ref }}"
