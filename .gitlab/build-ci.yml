pdf-build:
  image: neelzee/nmide-thesis:latest
  stage: build
  when: always
  script:
    - pdflatex --version
    - pdflatex --output-directory=thesis thesis/main.tex
  rules:
    - if: "$CI_PIPELINE_SOURCE == $CI_PIPELINE_SOURCE"
      when: always
      changes:
        - thesis/**
  artifacts:
    when: on_success
    access: all
    paths:
      - thesis/*.pdf

nmide-lib-build:
  image: neelzee/nmide-c:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
  stage: build
  when: manual
  script:
    - exit
    - gcc --version
    - cmake --version
    - make --version
    - mkdir lib/release
    - cd nmide-lib/release
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make
    - ls
  artifacts:
    when: on_success
    access: all
    paths:
      - nmide-lib/release/libnmide.*

windows-build:
  image: neelzee/nmide-tauri:latest
  stage: build
  when: manual
  script:
    # Adding Windows 64-bit target
    - apt-get clang
    - rustup target add x86_64-pc-windows-msvc
    - cargo install --locked cargo-xwin
    - npm --version
    - cd core
    - pwd
    - npm i
    - npm run tauri build -- --runner cargo-xwin --target x86_64-pc-windows-msvc
  tags:
    - nmide-core-windows
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

linux-build:
  image: neelzee/nmide-tauri:latest
  stage: build
  when: manual
  tags:
    - nmide-core
  script:
    - npm --version
    - cd core
    - pwd
    - npm i
    - npm run tauri build
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR

mac-build:
  stage: build
  when: manual
  tags:
    - nmide-core
  script:
    - echo "TODO"
  artifacts:
    when: on_success
    access: all
    paths:
      - $CORE_OUT_DIR
