@mastersthesis{autoUi,
  title = {Automating User Interfaces for a Multi-way Dataflow Constraint System},
  author = {Karl Henrik Elg Barlinn},
  year = {2022},
  url = {https://hdl.handle.net/11250/3001144},
  institution = {University of Bergen},
}

@article
{ dslMdcs
  , title = {A domain-specific language for structure manipulation in constraint system-based GUIs}
  , author = {Knut Anders Stokke, Mikhail Barash, Jaakko Järvi}
  , journal = {Journal of Computer Languages}
  , volume = 74
    , number = 101175
    , year = 2023
    , publisher = {Elsevier}
  , doi = {10.1016/j.cola.2022.101175}
  , keywords = {GUI programming, Separation of concerns, Rule based systems, Declarative programming, Dataflow constraint systems}
}

@InProceedings{baggeIde,
  title = {Facts, Resources and the {IDE}/Compiler Mind-Meld},
  author = {Anya Helene Bagge},
  year = {2013},
  booktitle = {Proceedings of the 4th International Workshop on Academic Software Development Tools and Techniques (WASDeTT'13)},
  editor = {Mark van den Brand and Kim Mens and Pierre-Etienne Moreau and Jurgen Vinju},
  publisher = {WASDeTT},
  location = {Montpellier, France},
  url = {http://www.ii.uib.no/~anya/papers/bagge-wasdett13-ide.html},
  pdf = {http://www.ii.uib.no/~anya/papers/bagge-wasdett13-ide.pdf},
}

@mastersthesis{warmDrink,
  title = {Declaratively Programming the Dynamic Structure of Graphical User Interfaces},
  author = {Knut Anders Stokke},
  year = {2020},
  url = {https://hdl.handle.net/1956/22882},
  institution = {University of Bergen},
}

@article{lwb,
  title = {Evaluating and comparing language workbenches: Existing results and benchmarks for the future},
  journal = {Computer Languages, Systems \& Structures},
  volume = {44},
  pages = {24-47},
  year = {2015},
  note = {Special issue on the 6th and 7th International Conference on Software Language Engineering (SLE 2013 and SLE 2014)},
  issn = {1477-8424},
  doi = {https://doi.org/10.1016/j.cl.2015.08.007},
  url = {https://www.sciencedirect.com/science/article/pii/S1477842415000573},
  author = {Sebastian Erdweg and Tijs {van der Storm} and Markus Völter and Laurence Tratt and Remi Bosman and William R. Cook and Albert Gerritsen and Angelo Hulshout and Steven Kelly and Alex Loh and Gabriël Konat and Pedro J. Molina and Martin Palatnik and Risto Pohjonen and Eugen Schindler and Klemens Schindler and Riccardo Solmi and Vlad Vergu and Eelco Visser and Kevin {van der Vlist} and Guido Wachsmuth and Jimi {van der Woning}},
  keywords = {Language workbenches, Domain-specific languages, Questionnaire language, Survey, Benchmarks},
  abstract = {Language workbenches are environments for simplifying the creation and use of computer languages. The annual Language Workbench Challenge (LWC) was launched in 2011 to allow the many academic and industrial researchers in this area an opportunity to quantitatively and qualitatively compare their approaches. We first describe all four LWCs to date, before focussing on the approaches used, and results generated, during the third LWC. We give various empirical data for ten approaches from the third LWC. We present a generic feature model within which the approaches can be understood and contrasted. Finally, based on our experiences of the existing LWCs, we propose a number of benchmark problems for future LWCs.}
}

@mastersthesis{flush,
  title = {Declaratively Programming the Dynamic Structure of Graphical User Interfaces},
  author = {Maria Katrin Bonde},
  year = {2024},
  url = {https://hdl.handle.net/11250/3147681},
  institution = {University of Bergen},
}

@mastersthesis{leastGui,
  title = {Least Surprising Dataflows in Constraint Based Graphical User Interfaces},
  author = {Daniel Svalestad Liland},
  year = {2024},
  url = {https://hdl.handle.net/11250/3147685},
  institution = {University of Bergen},
}

@mastersthesis{mcdsRust,
  title = {Multithreaded Multiway Constraint Systems with Rust and WebAssembly},
  author = {Rudi Blaha Svartveit},
  year = {2021},
  url = {https://hdl.handle.net/11250/2770614},
  institution = {University of Bergen},
}

@mastersthesis{toolMcds,
  title = {Tool support for specifying multi-way dataflow constraint systems},
  author = {Mathias Skallerud Jacobsen},
  year = {2022},
  url = {https://hdl.handle.net/11250/3045556},
  institution = {University of Bergen},
}

@article{cafeObj,
  title = {Logical foundations of CafeOBJ},
  journal = {Theoretical Computer Science},
  volume = {285},
  number = {2},
  pages = {289-318},
  year = {2002},
  note = {Rewriting Logic and its Applications},
  issn = {0304-3975},
  doi = {https://doi.org/10.1016/S0304-3975(01)00361-9},
  url = {https://www.sciencedirect.com/science/article/pii/S0304397501003619},
  author = {Răzvan Diaconescu and Kokichi Futatsugi},
  keywords = {Algebraic specification, , Institutions, Behavioural specification},
  abstract = {This paper surveys the logical and mathematical foundations of CafeOBJ, which is a successor of the famous algebraic specification language OBJ but adds to it several new primitive paradigms such as behavioural concurrent specification and rewriting logic. We first give a concise overview of CafeOBJ. Then we focus on the actual logical foundations of the language at two different levels: basic specification and structured specification, including also the definition of the CafeOBJ institution. We survey some novel or more classical theoretical concepts supporting the logical foundations of CafeOBJ, pointing out the main results but without giving proofs and without discussing all mathematical details. Novel theoretical concepts include the coherent hidden algebra formalism and its combination with rewriting logic, and Grothendieck (or fibred) institutions. However, for proofs and for some of the mathematical details not discussed here we give pointers to relevant publications. The logical foundations of CafeOBJ are structured by the concept of institution. Moreover, the design of CafeOBJ emerged from its logical foundations, and institution concepts played a crucial rôle in structuring the language design.}
}

@unpublished
{ wig
  , title = {Third times the charm; a new compiler for the Magnolia Research Language}
  , note = {Unpublished master thesis}
  , year = {2025}
}


@ARTICLE{eclipseRcp,
  author={Kornstadt, Andreas and Reiswich, Eugen},
  journal={IEEE Software},
  title={Composing Systems with Eclipse Rich Client Platform Plug-Ins},
  year={2010},
  volume={27},
  number={6},
  pages={78-81},
  keywords={Software reviews;Client server systems;technology;Eclipse;rich client platform;RCP},
  doi={10.1109/MS.2010.138}
}

@article{GROSS200322,
  title = {Built-In Contract Testing in Component Integration Testing},
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {82},
  number = {6},
  pages = {22-32},
  year = {2003},
  note = {TACoS'03, International Workshop on Test and Analysis of Component-Based Systems (Satellite Event of ETAPS 2003)},
  issn = {1571-0661},
  doi = {https://doi.org/10.1016/S1571-0661(04)81022-3},
  url = {https://www.sciencedirect.com/science/article/pii/S1571066104810223},
  author = {Hans-Gerhard Gross and Nikolas Mayer},
  abstract = {Assembling new software systems from prefabricated components is an attractive alternative to traditional software engineering practices which promises to increase reuse and reduce development costs. However, these benefits will only occur if separately developed components can be made to work effectively together with reasonable effort. Lengthy and costly in-situ verification and acceptance testing directly undermines the benefits of independent component fabrication and late system integration. This position paper outlines and introduces an approach for reducing manual system verification effort by equipping components with the ability to check their execution environments at run-time. When deployed in new systems, built-in tester components check the contract-compliance of their server components, including the run-time system, and thus automatically verify their ability to fulfill their own obligations. This comprises functional/behavioural contracts as well as quality-of-service contracts between individual components. Enhancing traditional component-based development methods with built-in contract testing in this way reduces the costs associated with component assembly, and thus makes the “plug-and-play” vision of component-based development closer to practical reality.}
}

@online{topIde,
  author = {Pierre Carbonnelle},
  title = {Top IDE index},
  year = {2023},
  url = {https://pypl.github.io/IDE.html},
  urldate = {2025-04-20}
}

@online{openApi,
  author = {SmartBear Software},
  title = {What Is OpenAPI?},
  year = {2025},
  url = {https://swagger.io/docs/specification/v3_0/about/},
  urldate = {2025-04-20}
}

@online{pact,
  author = {Pact Foundation},
  title = {How Pact works},
  year = {2025},
  url = {https://docs.pact.io/},
  urldate = {2025-04-20}
}

@article{cNotLowLevel,
  author = {Chisnall, David},
  title = {C Is Not a Low-level Language: Your computer is not a fast PDP-11.},
  year = {2018},
  issue_date = {March-April 2018},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {16},
  number = {2},
  issn = {1542-7730},
  url = {https://doi.org/10.1145/3212477.3212479},
  doi = {10.1145/3212477.3212479},
  abstract = {In the wake of the recent Meltdown and Spectre vulnerabilities, it’s worth spending some time looking at root causes. Both of these vulnerabilities involved processors speculatively executing instructions past some kind of access check and allowing the attacker to observe the results via a side channel. The features that led to these vulnerabilities, along with several others, were added to let C programmers continue to believe they were programming in a low-level language, when this hasn’t been the case for decades.},
  journal = {Queue},
  month = apr,
  pages = {18–30},
  numpages = {13}
}


@online{elmFig,
  author = {Evan Czaplicki},
  title = {The Elm Architecture},
  year = {2021},
  url = {https://guide.elm-lang.org/architecture/},
  urldate = {2025-04-23}
}
