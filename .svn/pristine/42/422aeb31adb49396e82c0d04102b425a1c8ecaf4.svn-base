\chapter{Conclusion} \label{cha:conclusion}

The hypothesis \ref{hyp:modular} is right, source? Me.

\section{Modular Development}

In this thesis, we have shown that developing against a zero-core modular
architecture is trivial. By utilizing separation of concerns, a module developer
needs to only understand the feature they want to extend, or if it is an
entirely new feature, find out what has been done before.

Developing against an unstable \gls{api} is difficult, when developing a module
architecture, it is like an unstable \gls{api} when it is not \textit{mature},
e.g. when it does not have settled modules to develop against. Since this is
the case, there are a lot of issues with the existing modules, making the user
experience less than competing \gls{ide}s. Most of these are minors, and can be
fixed with some minor revisions to the existing modules, for instance, when
closing the \gls{ide}, unsaved changes are discarded, with no information given
to the user. Or how what project a user was working on, is not saved between
instances, so a user has to re-open the project they worked on. This is a side
effect of the development plan, and not the architecture. To fully test out this
architecture, it was thought that a wide range of modules should be implemented,
to quickly iron out issues with the implementation of the architecture, and to
figure out what functionality Tauri has, that we can expose, like the file
selection.
So not only were modules needed to cover the necessities to qualify as an
\gls{ide}, but they were also needed to \textit{test} the implementation. Not
having a developer dedicated to only implement modules, meant that module
development was usually dropped for other things. As every time a module where
worked on, it would eventually lead to a discovery, that the current \gls{api}
needed some change, which would enable the module feature to be easier
implemented. A concrete example of this, is the editor module.
An essential part of an editor, in an \gls{ide} at least, is being able to
utilize a \gls{lsp}. Most of the communication between a client and \gls{ls},
require information about \textit{where} the user is in the text. This
information is available in a \textit{textarea}-element, but some change to how
Events are sent were needed. In standard JavaScript development,
\textit{eventListeners} can be specific to the \gls{html}-element they are
applied to. The same is not possible in our \gls{api}, as Events are generic.
Instead we made Events gather information about the \gls{dom}-Event they were
triggered by, so in the case of \textit{click} attribute, we know the
\gls{dom}-event is of type \textit{MouseEvent}, which can give us some,
information. And if the \textit{target}, (a field on \textit{MouseEvent}) is an
instance of \textit{HtmlInputElement} or \textit{textarea}, we know that the
\textit{selectionStart} and \textit{value} field exist on the target. With
which, we can manually calculate the position of the click. Implementing this
meant adding a breaking change to the \gls{api}, which deprecated different
modules, so more time was spent on re-implementing them.

\subsection{Language Agnosticism}

Not really achieved, because we cannot syntactically translate between a
JavaScript Module and a Rust Module, but again, this is due breaking changes
being made, (in the past), which deprecated modules.

\section{Making an IDE is hard}

An \gls{ide} has many features, which are needed to enhance the developer
experience. To achieve this, the modular approach enables future users to
enhance the application.

\begin{figure}
  \centering
  \input{./figures/text-editor}
  \caption{Text Editor Module Family}
  \label{fig:extendedModuleFamily}
\end{figure}

In the figure \ref{fig:extendedModuleFamily}, the \textit{cursor} is the place
at which text is placed when the user writes. If the user clicks someplace in
the document, the cursor \textit{jumps} to that place. If the user uses the
arrow-keys to move around, the cursor moves one character to left or right, or
one line up and down, depending on which arrow-key was pressed.

\section{Cons}

If you are the one developing every module, it get's very complex.

If you have a problem, and try to solve it with concurrency, now problems two
have you.
