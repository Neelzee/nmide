\section{Research questions}

\todo{Rewrite this}
Exploring how modularization can facilitate the design and implementation of
an integrated development environment targeting experimental programming
languages.

\todo{Red-thread is missing, find it}

\todo{
  Should probably also expand on what we mean by limiting,
  (i.e. limiting in the sense of plugins being developed)
}

\todo{Rewrite to be more academic}

\paragraph{Language Agnostic} The largest limiting factor in module oriented
applications, is the \textit{language barrier} Most applications limit what
language one can extend an application with, like in "Visual Studio Code", where
it's \textit{just} JavaScript/HTML/CSS. Or IntelliJ, where one can use Java or
Kotlin. But what does language agnostic mean in the context of programming
languages? It is, and always will be (sorry Rust): C. Any language worth a damn,
can create some bindings with C. So, for a module application to be Language
Agnostic, it must be able to use C Modules. This just means that the application
must be able to call function from a C library.

\todo{
  I guess the goal of this project is to create software that lasts a
  \textit{long} time, which can be achieved by keeping in mind the
  following concepts.
}

\paragraph{Open Source} How does open source affect software longevity?

\paragraph{Modular} How does modularity affect software longevity?

\paragraph{Module Language Agnostic} How does open source affect software
longevity?
