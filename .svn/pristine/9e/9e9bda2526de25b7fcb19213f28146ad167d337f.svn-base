\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
      \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
        \item Automatically \textit{dropped}
      \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
        \item Automatically \textit{dropped}
        \item No dangling pointers/null references or memory leakage*
      \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
        \item Automatically \textit{dropped}
        \item No dangling pointers/null references
      \end{itemize}
    \item Tauri, UI components can be created using JavaScript
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
        \item Automatically \textit{dropped}
        \item No dangling pointers/null references
      \end{itemize}
    \item Tauri, UI components can be created using JavaScript
    \item Splits the core application into two parts, loosely coupled parts
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
        \item Automatically \textit{dropped}
        \item No dangling pointers/null references
      \end{itemize}
    \item Tauri, UI components can be created using JavaScript
    \item Splits the core application into two parts, loosely coupled parts
      \begin{itemize}
        \item Frontend (JavaScript)
        \item Backend (Rust)
      \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
        \item Automatically \textit{dropped}
        \item No dangling pointers/null references
      \end{itemize}
    \item Tauri, UI components can be created using JavaScript
    \item Splits the core application into two parts, loosely coupled parts
      \begin{itemize}
        \item Frontend (JavaScript)
        \item Backend (Rust)
      \end{itemize}
    \item Communication is like JSON-RPC, which, effectively, is the same as a
      client-server
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Tech \sout{Heap} Stack}
  \begin{itemize}
    \item Rust, because it is a low level system language
      \begin{itemize}
        \item Compiler knows when a value is unused
        \item Automatically \textit{dropped}
        \item No dangling pointers/null references
      \end{itemize}
    \item Tauri, UI components can be created using JavaScript
    \item Splits the core application into two parts, loosely coupled parts
      \begin{itemize}
        \item Frontend (JavaScript)
        \item Backend (Rust)
      \end{itemize}
    \item Communication is like JSON-RPC, which, effectively, is the same as a
      client-server
    \item Allows for modules in two different languages, with little effort.
      I hoped.
  \end{itemize}
\end{frame}
