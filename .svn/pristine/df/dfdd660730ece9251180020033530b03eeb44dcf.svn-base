\section{Introduction}
\SectionPage

\begin{frame}
  \frametitle{Topic}
  \begin{itemize}
    \item Developing a Modular IDE for Magnolia
    \pause
      \begin{itemize}
        \item Magne Haveraaen and Mikhail Barash
      \end{itemize}
    \pause
    \item What an IDE is
    \item About Magnolia
    \item The why's
    \item Challenges
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{The solution to the problem}
  \begin{quote}
    "It works on my machine." \textemdash Intern
  \end{quote}
  \begin{itemize}
    \item The text editor, the compiler, and the terminal,
    \pause
    \item Eventually needed build scripts for large projects
    \begin{itemize}
      \item Lead to more complex build scripts
      \item Eventually ending up with applications like Gradle and Maven
    \end{itemize}
    \pause
    \item Missing/incomplete:
    \pause
    \begin{itemize}
      \item Libraries
      \item Environment variables
      \item Configurations
      \item Scripts
      \pause
    \end{itemize}
  \item What if everything is bundled?
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Integrated Development Environment}
  \begin{itemize}
    \pause
    \item Easier to onboard new developers
    \item Other quality of life improvements
    \pause
    \begin{itemize}
      \item File explorer
      \item Project manager
      \item Version Control System integration
      \item Syntax Highlighting
      \item Integrated debugging
      \item \dots
    \end{itemize}
  \end{itemize}
\end{frame}

\section{Who cares?}
\SectionPage

\begin{frame}
  \frametitle{Bergen Language Design Laboratory}
  \begin{itemize}
    \item Researches at BLDL are experimenting with a research programming
      language called Magnolia
    \pause
    \item Takes inspiration from
    \begin{itemize}
      \item Generic programming
      \item Algebraic specifications
      \item Theory of institutions
      \item And other languages like CafeOBJ and Maude
    \end{itemize}
    \item Created to experiment with novel language features
    \pause
    \begin{itemize}
      \item Functionalization
      \item Mutification
      \item Generated types
      \item Type partitions
      \item \dots
      \pause
    \end{itemize}
  \item Which may be out-of-scope for IDEs
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Magnolia}
  \begin{itemize}
    \item Introduces something called \textit{concepts}
    \item Similar to a Java interface.
    \pause
    \item A concept declares
    \begin{itemize}
      \item Types
      \item Operations on those types
      \item Axioms that specify the behavior of the operations
    \end{itemize}
    \item A concept can use other concepts, and rename the types and operations
      in the concept, this is called renaming
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Magma example in mathematical notation}
  \begin{equation}
    M = \{ a, b, c, \dots \}
  \end{equation}
  \begin{equation}
    (M, \bullet)
  \end{equation}
  \begin{equation}
    \forall a, \forall b \in M \implies a \bullet b \in M
  \end{equation}
\end{frame}

\begin{frame}
  \frametitle{Group example in mathematical notation}
  \begin{equation}
    \forall a, \forall b \in M \implies a \bullet b \in M
  \end{equation}
  Associativity
  \begin{equation}
    \forall a, \forall b, \forall c \in M \implies
    (a \bullet b) \bullet c = a \bullet (b \bullet c)
  \end{equation}
  Identify
  \begin{equation}
    \forall a, \exists e \in M \implies a \bullet e = a
  \end{equation}
  Invertability
  \begin{equation}
    \forall a, \exists b \in M \implies a \bullet b = e
  \end{equation}
\end{frame}

\begin{frame}
  \frametitle{Group is a Magma with more properties}
  \begin{itemize}
    \item Magma is trivial to implement in Java
    \item Group is more complicated
    \item Group \textit{extends} monoid \textit{extends} semigroup
      \textit{extends} magma
    \item With \textit{inverse element}, \textit{identity}, and
      \textit{associativity} respectively
  \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Magma to Group example in Java}
    \begin{center}
      \lstinputlisting
      [ language=Java
      ]{./code/magma.java}
    \end{center}
    \begin{center}
      \lstinputlisting
      [ language=Java
      ]{./code/semigroup.java}
    \end{center}
    \begin{center}
      \lstinputlisting
      [ language=Java
      ]{./code/monoid.java}
    \end{center}
    \begin{center}
      \lstinputlisting
      [ language=Java
      ]{./code/group.java}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Magma example in Magnolia}
    \begin{center}
      \lstinputlisting
      [ language=Magnolia
      ]{./code/magma.mg}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Semigroup example in Magnolia}
    \begin{center}
      \lstinputlisting
      [ language=Magnolia
      ]{./code/semigroup.mg}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Monoid example in Magnolia}
    \begin{center}
      \lstinputlisting
      [ language=Magnolia
      ]{./code/monoid.mg}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Group example in Magnolia}
    \begin{center}
      \lstinputlisting
      [ language=Magnolia
      ]{./code/group.mg}
    \end{center}
\end{frame}

\begin{frame}
  \frametitle{If It Ain't Broke}
  The current Magnolia IDE
  \pause
  \begin{itemize}
    \item Integrated with the Magnolia Compiler
    \pause
    \item Made using an old version of Eclipse
    \pause
    \item Uses deprecated Eclipse plugins
    \pause
    \item Installation process is complex
    \pause
    \item In INF220, two weeks is set aside for students to install it
  \end{itemize}
\end{frame}

\section{Why create a \textit{new} IDE?}
\SectionPage

\begin{frame}
  \frametitle{Forking VS Code And Adding AI}
  \begin{itemize}
    \item Current IDEs cannot have good support for experimental programming
      languages
      \pause
      \begin{itemize}
        \item So niche solutions are needed
          \pause
        \item Which might depend on very specific functionality from the host
          IDE
          \pause
      \end{itemize}
    \item Deep understanding of the host IDE is needed
      \pause
    \item The host IDE could deprecate needed functionality
    \item The installation process would then be complex
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Why Modular?}
  \begin{itemize}
    \item Magnolia is still in development
      \pause
    \item The Magnolia toolchain is being developed in parallel
      \pause
    \item Modularity allows for future discoveries to be quickly adopted into
      the IDE
      \pause
    \item Lowers the onboarding time for future maintainers
  \end{itemize}
\end{frame}
