\section{25.04.02}

Wasted the whole day, trying to build the rust code using flakes. Did not get it
to work, and noticed I don't get any LSP help, probably due to linking issues. I
think the best solution is to distro-jump to Debian, which \textit{just works},
and add Nix as a package which I could use for development. Getting stuff to
work in on NixOs is hard, probably in some part due to me not reading the
documentation that well. Or being able to find the documentation.
Regardless, there is some restructuring in the code that is ahead of me, I need
to be finished with the implementation stuff in two weeks, at the end of April
at the latest.

I think I'll just write some stuff, and hope it works, code-wise, until I get a
proper environment setup.

\section{25.04.03}

Got stuff to work, back on Debian again. I think I should just rewrite the base
to use \textit{regular} Rust stuff, so none of the ABI stuff. This will simplify
the code, while still allowing me to keep the stuff I've written about, since I
can talk about \textit{it would be cool if \dots}, instead of having to actually
implement the cool stuff.

\section{25.04.04}

I have discussed this before, I think, but how should the frontend and backend
communicate? I am leaning towards a frontend \to backend communication method,
so the frontend does the rendering, and event \to event mapping, but the backend
does all the state management. But will look into it.

I've done some refactoring, again. I have Rust Traits now, which I've used to
create an API for my modules, which other foreign languages can implement. I
will have to send UI modifications to the frontend, but I could coalesce them
all in the backend, by finding UI modifications that "just" result in the
identity.

Doing the modification/instruction thing is difficult, at least the way I want
to implement it. I wanted it to be some kind of DSL, so that I could analyze it.
But this is proving difficult. I think it is because I am over-engineering it,
so instead of having "add node to node", or something like that, I am supplying
a function which does the modification. It is probably better if I transpile the
DSL to the function, after I've done some analysis on it, to remove redundant or
invalid instructions.

\section{25.04.05}

It is difficult to do something correct. Not that I think I am doing it
correctly, but it is difficult. I've made some mix of a DSL + function
supplying. Which is a combination of what I said I was going to do, with what I
said I was not going to do. I think it works, it uses Rust Traits to encode
field modifications on a type-level, which is pretty interesting. I just have to
make a struct for each field that is modifiable, supplying a setter and getter.

Just setting the state is okay, the \textit{only} issue is reporting to
the module developer that the field does not exist, or something like that if
they try to modify a non-existing field. Which probably can be done
\textit{easily}. I think making an instruction set for each tree is the way to
go, at least until I see a way to combine them later.

\section{25.04.06}

Stuff works, kinda, so that's fun. I am having issues with the Trait system, as,
surprisingly, doing runtime-thread Trait usage is difficult. It made it easier
to integrated Modules, as I could simply implement the interface, but maybe
looking into using a struct instead? I would have a similar problem, where I
have field for a function, but I don't really know. Tomorrow, I'll look into
the async_trait crate, which apparently can help here.

\section{25.04.07}

Stuff works again, took only 4 months. Well, it kinda works. Still some kinks to
iron out, but should be able to figure out that by the end of the week. I should
definitively mention the trait system in Rust, because I am using it a lot. I
should also re-write the API section, to be more story like, implementing
logging and then the editor, in Rust and Magnolia. Looking at the differences,
especially how refactoring it to use semigroup and group traits/concepts.

I think I am going to remove everything I am not using, and either re-write it
if I need it, or checking previous commits to find it again. Since there is so
much garbage here currently, it probably feels good for the repository to have
commits which is just "deleted file".

\section{25.04.09}

I should find out what happens when I throw an event in a handler.

Done some important thinking. What should the logo of the application be?

\begin{enumerate}
  \item Bunch of gears
  \begin{enumerate}
    \item Common icon for settings/config/etc.
    \item Maybe incorporate some kind of gear switching?
  \end{enumerate}
  \item Box with stuff in it
  \begin{enumerate}
    \item Gets the idea that this is just a bunch of shit thrown together
    \item can write Nmide across the box
  \end{enumerate}
  \item Dependency Graph
  \begin{enumerate}
    \item Looks complex
    \item Could be the dependency graph of the application
    \item Could get different colors depending on different actions
    \item Difficult to be a small icon
  \end{enumerate}
  \item Trebuchet and a baseball-glove
  \begin{enumerate}
    \item Trebuchets are dope as fuck
    \item because you throw and catch events
  \end{enumerate}
  \item Party Hat
  \begin{enumerate}
    \item because you throw events (parties)
  \end{enumerate}
\end{enumerate}

Had a meeting with my supervisor, apparently I have to have actual functionality
in the application? Weird.

Anyway, he had some points, which I'll try to summarize here.

\begin{enumerate}
  \item Related work
    \begin{enumerate}
      \item Stuff that is similar to what I do
        \begin{enumerate}
          \item MVC
          \item IDE development
          \item Other stuff that I've forgor :dead:
        \end{enumerate}
      \item Should be pseudo-structured, since I cover such a large area
    \end{enumerate}
  \item Need a rudimentary IDE to showcase, can't just talk about stuff
  \item Talk more about LSP stuff
    \begin{enumerate}
      \item LS
      \item Caching
    \end{enumerate}
  \item I can't use application as a term for IDE, just use IDE everywhere
  \item I have some kind of research question/hypotheses, which I should "answer"
    in the conclusion
  \item Mention Magnolia satisfaction, which relate concepts and implementations
  \item This is equivalent to doing unit-testing in other languages, as Magnolia
    does not "force" a consumer of the API to uphold the requirements set forth
    by the provider
  \item Tie together the abstract algebra stuff, with testing the IDE itself
  \item Mention more modularity in Eclipse
  \item It should be easy to rewrite a module from one language to another
  \item Discuss more deeply "unpure" modules, and how the core is best
  \item Create a module for visualizing a DAG
  \item Write more specifically about pros and cons in the different
    architecture versions
  \item Future work section should set forth a concrete plan for what is needed
    to turn the partial IDE into a fully fledged one
\end{enumerate}

Ignoring that for a minute, web workers for module systems. Per this link:
https://github.com/tauri-apps/tauri/discussions/3922
it should just work out of the box, and could allow for a better way to do
modules, I hope

\section{25.04.10}

My supervisor was a fan of me using different programming languages in my
listings, but he wanted me to add what language it was in the label, which is
fair, but now I feel like I should use different languages in the
implementation, just because. So I started with Gleam, off course, but I am now
sidetracked, and will work on my compiler instead.

I also should rename the folders in my project so that they get cute icons from
catppuccin icons plugin.

\section{25.04.11}

Got a Gleam library to work, which is neat. Got a lot of busywork ahead of me,
which is fine, I guess. Basically redoing what I did in the fall. I should go
in depth about the issue of pureness in the application, in respect to the JSMS.
I should also mention how modular the Core is, which is future proofing the IDE
itself.

I think all I have left is to re-add module installation. I've decided, for this
part at least, to remove module validation, and leave that as a TODO for later.
Validation is for when I have people whom I don't trust, doing development, and
currently there is just one person who does development, and it's me, and I know
he will fuck up, but he also has to fix the fuck-ups.

New plan/idea. Keep the "frontend" as thin as possible. So it should have no
logic, or stuff like that. All it does is call "init" when the DOM is loaded,
and then it doesn't event do rendering, it calls whatever \textit{rendering}
method it has been supplied. That way, I can do a lot of stuff in Gleam, and be
like \quote{look how cool I am, I have the IDE in different languages}. Which is
cool. Even though its just JavaScript.

I have misunderstood myself. I've been designing and implementing the JSMS using
Gleam, instead of the rendering part of the frontend. Maybe call it the
JavaScript Module Runtime instead, because it's kinda like a runtime, I guess?
Based on my probably flawed understanding of what a runtime is. Or based on my
overloading of the term runtime.

\section{25.04.12}

I got a cooler system for module installation. I am using the html event system,
to throw an event when the moduleCount is 0, which indicates that all modules
have been installed. This is checked several places, because currently, with no
modules, it is triggered as soon as the ideModuleInstaller function is finished,
but normally, it will be triggered when the last module does
window.module.insert, which would bring the moduleCount to 0. I dont know if it
works 100 \%, like most of my code, I just \textit{feel} like it should. Which
is what \textit{vibe-coding} is too me. None of that LLM shit. Sure, sometimes
it's easier to get the wrong answer from Chet, than it is to google the same
question and get another LLM article about it, but that's more an information
issue. I think we \textit{proper} developers should use vibe-coding to mean
\textit{I am writing so much code in different places, vibing it to be correct}.

\section{25.04.13}

I should \textit{sharp}(skjerp) myself, I've been avoiding doing type stuff in
TypeScript, because I am lazy. I've made a lot of the types in Rust and Gleam,
and I couldn't be bothered to properly use them in TypeScript. The IDE kinda
works, but I have no modules to show for it. And the JSMS doesnt work at all.
Why it doesn't work, I don't know, but it's not helping that the types are
sometimes wrong. I think Gleam could be silently erroring, either that or I
still haven't figured out how to do module installation. To be fair, the JSMS
stuff I am doing, is basically runtime extension of the IDE, so I think I could,
tomorrow or something, stash all the changes I've made, and just do a compile
time JSMS. I also think I should remove the T*-types, meaning there should be no
difference between the Rust and TypeScript types. The reason there is a
difference now, is because I couldn't be bothered to do pattern matching in
TypeScript, because, to be fair, it sucks. But I think I just have to bite that
bullet, and \textit{sharp}(adult up) myself, and get to it. Here is the general
plan:

\begin{enumerate}
  \item Delete ts_* modules in core-foreign-lib
  \item Add TS, Serialize, Deserialize to core Rust types
  \item Sketch out the API between the frontend, backend and the JSMS runtime
  \item Implement the sketched out API
  \item \dots
  \item Profit?
\end{enumerate}

I'll probably do a mix of coding and writing in the coming weeks. Hopefully I
won't do much development in May, but I'll probably have to, I have some stuff I
want to do:

\begin{itemize}
  \item Refactor the compile time module installation
  \item Add tests
  \item Make more modules
\end{itemize}